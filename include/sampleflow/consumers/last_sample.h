// ---------------------------------------------------------------------
//
// Copyright (C) 2019 by the SampleFlow authors.
//
// This file is part of the SampleFlow library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------

#ifndef SAMPLEFLOW_CONSUMERS_LAST_SAMPLE_H
#define SAMPLEFLOW_CONSUMERS_LAST_SAMPLE_H

#include <sampleflow/consumer.h>
#include <mutex>


namespace SampleFlow
{
  namespace Consumers
  {
    /**
     * A Consumer class that simply stores the last sample it has received.
     *
     *
     * ### Threading model ###
     *
     * The implementation of this class is thread-safe, i.e., its
     * consume() member function can be called concurrently and from multiple
     * threads.
     *
     *
     * @tparam InputType The C++ type used for the samples $x_k$.
     */
    template <typename InputType>
    class LastSample : public Consumer<InputType>
    {
      public:
        /**
         * The type of the information generated by this class, i.e., the type
         * of the object returned by get(). This is of course the InputType.
         */
        using value_type = InputType;

        /**
         * Destructor. This function also makes sure that all samples this
         * object may have received have been fully processed. To this end,
         * it calls the Consumers::disconnect_and_flush() function of the
         * base class.
         */
        virtual ~LastSample ();

        /**
         * Process one sample by forgetting about the previously last sample
         * and instead storing this one for later access using the get()
         * function.
         *
         * @param[in] sample The sample to process.
         * @param[in] aux_data Auxiliary data about this sample. The current
         *   class does not know what to do with any such data and consequently
         *   simply ignores it.
         */
        virtual
        void
        consume (InputType sample, AuxiliaryData aux_data) override;

        /**
         * A function that returns the last sample processed by the consume()
         * function. If no samples have been processed so far, then a
         * default-constructed object of type InputType will be returned.
         *
         * @return The computed mean value.
         */
        value_type
        get () const;

      private:
        /**
         * A mutex used to lock access to all member variables when running
         * on multiple threads.
         */
        mutable std::mutex mutex;

        /**
         * The value of the last sample seen by consume().
         */
        InputType last_sample;
    };



    template <typename InputType>
    LastSample<InputType>::
    ~LastSample ()
    {
      this->disconnect_and_flush();
    }



    template <typename InputType>
    void
    LastSample<InputType>::
    consume (InputType sample, AuxiliaryData /*aux_data*/)
    {
      std::lock_guard<std::mutex> lock(mutex);

      last_sample = std::move (sample);
    }



    template <typename InputType>
    typename LastSample<InputType>::value_type
    LastSample<InputType>::
    get () const
    {
      std::lock_guard<std::mutex> lock(mutex);

      return last_sample;
    }

  }
}

#endif
