// ---------------------------------------------------------------------
//
// Copyright (C) 2019 by the SampleFlow authors.
//
// This file is part of the SampleFlow library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------

#ifndef SAMPLEFLOW_CONSUMERS_MAXIMUM_PROBABILITY_SAMPLE_H
#define SAMPLEFLOW_CONSUMERS_MAXIMUM_PROBABILITY_SAMPLE_H

#include <sampleflow/consumer.h>
#include <mutex>


namespace SampleFlow
{
  namespace Consumers
  {
    /**
     * A Consumer class that implements storing the most likely among the
     * samples seen so far. This is an approximation to the Maximum
     * A Posterior probability point of the probability distribution
     * being sampled. To do its work, this class evaluates the
     * AuxiliaryData object passed along with each sample and
     * looks at whether it contains an entry named "relative log likelihood"
     * (see, for example, the Producers::MetropolisHastings class as an
     * example of a class that produces such auxiliar data). If the value
     * of this entry is larger than the previously largest value seen,
     * then the previous sample is replaced by the current sample.
     *
     *
     * ### Threading model ###
     *
     * The implementation of this class is thread-safe, i.e., its
     * consume() member function can be called concurrently and from multiple
     * threads.
     *
     *
     * @tparam InputType The C++ type used for the samples $x_k$.
     */
    template <typename InputType>
    class MaximumProbabilitySample : public Consumer<InputType>
    {
      public:
        /**
         * The type of the information generated by this class. Here, this
         * is a pair of InputType, the data type used to represent samples,
         * and the AuxiliaryData that was attached to this sample.
         */
        using value_type = std::pair<InputType,AuxiliaryData>;

        /**
         * Constructor.
         */
        MaximumProbabilitySample ();

        /**
         * Destructor. This function also makes sure that all samples this
         * object may have received have been fully processed. To this end,
         * it calls the Consumers::disconnect_and_flush() function of the
         * base class.
         */
        virtual ~MaximumProbabilitySample ();

        /**
         * Process one sample by checking whether it has a higher probability
         * (log likelihoood) than the previously most likely one. If so, store
         * it so that it can later be returned by the get() function.
         *
         * @param[in] sample The sample to process.
         * @param[in] aux_data Auxiliary data about this sample. The current
         *   class checks whether a sample has information named
         *   "relative log likelihood" attached to it (see, for example, the
         *   Producers::MetropolisHastings class) and evaluates its value.
         *   All other attributes are ignored.
         */
        virtual
        void
        consume (InputType     sample,
                 AuxiliaryData aux_data) override;

        /**
         * A function that returns the most likely among the samples
         * seen so far, along with the auxiliary data that was associated
         * with this sample when it came along. If no samples have been
         * processed so far, or if no sample had a suitable auxiliary data
         * object attached to it, then a pair with a default-constructed
         * object of type InputType and an empty AuxiliaryData object
         * will be returned.
         *
         * @return The pair described above.
         */
        value_type
        get () const;

      private:
        /**
         * A mutex used to lock access to all member variables when running
         * on multiple threads.
         */
        mutable std::mutex mutex;

        /**
         * The currently most likely sample.
         */
        InputType          current_most_likely_sample;

        /**
         * The auxiliary data associated with the currently most likely sample.
         */
        AuxiliaryData      current_most_likely_sample_data;

        /**
         * The log likelihood of the currently most likely sample. If we have
         * not seen any sample at all so far, then this value is set to
         * std::numeric_limits<double>::lowest().
         */
        double             current_highest_log_likelihood;
    };



    template <typename InputType>
    MaximumProbabilitySample<InputType>::
    MaximumProbabilitySample ()
      :
      current_most_likely_sample (),
      current_most_likely_sample_data (),
      current_highest_log_likelihood(std::numeric_limits<double>::lowest())
    {}



    template <typename InputType>
    MaximumProbabilitySample<InputType>::
    ~MaximumProbabilitySample ()
    {
      this->disconnect_and_flush();
    }



    template <typename InputType>
    void
    MaximumProbabilitySample<InputType>::
    consume (InputType sample, AuxiliaryData aux_data)
    {
      // Let's see first if the sample provided has the log likelihood
      // attribute we would like to evaluate
      if (aux_data.find ("relative log likelihood") != aux_data.end())
        {
          const double log_likelihood = boost::any_cast<double>(aux_data["relative log likelihood"]);

          std::lock_guard<std::mutex> lock(mutex);

          // Check if we have seen any sample at all so far
          if (current_highest_log_likelihood == std::numeric_limits<double>::lowest())
            {
              current_most_likely_sample = std::move (sample);
              current_most_likely_sample_data = std::move (aux_data);
              current_highest_log_likelihood = log_likelihood;
            }
          else
            {
              // We had seen samples before, so check whether this one is better.
              if (log_likelihood > current_highest_log_likelihood)
                {
                  current_most_likely_sample = std::move (sample);
                  current_most_likely_sample_data = std::move (aux_data);
                  current_highest_log_likelihood = log_likelihood;
                }
            }
        }
    }



    template <typename InputType>
    typename MaximumProbabilitySample<InputType>::value_type
    MaximumProbabilitySample<InputType>::
    get () const
    {
      std::lock_guard<std::mutex> lock(mutex);

      return {current_most_likely_sample, current_most_likely_sample_data};
    }

  }
}

#endif
